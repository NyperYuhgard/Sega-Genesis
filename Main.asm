    org $0


    include "src/ports.inc"
    include "src/equals.inc"
    include "src/ram_addrs.inc"
;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      ChinaPYG, 2022 Happy New Year                      |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 5A5497F47BF3892D60476151494B8E5B7949E6DB728ED513D162095D54DE1B9A
; Input MD5    : D3293EBAAA7F4EB2A6766B68A0FB4609
; Input CRC32  : 3F888CF4
; Processor       : 68020
; Target assembler: 680x0 Assembler in MRI compatible mode
; This file should be compiled with "as -M"
; ===========================================================================
; Segment type: Pure code
; segment "ROM"
; ROM segment
                dc.l System_Stack&$FFFFFF
                dc.l Reset
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
                dc.l Reserv3F
ConsoleName:    dc.b 'SEGA GENESIS    ' ; DATA XREF: MainCode+4   r
                                        ; MainCode+A   r ...
CopyRight:      dc.b '(C)SEGA 1990.MAY'
DomesticName:   dc.b 'GENESIS OS                                      '
OverseasName:   dc.b 'GENESIS OS                                      '
ProductCode:    dc.b 'OS 00000000-00'
Checksum:       dc.w $5B74
Peripherials:   dc.b '                '
RomStart:       dc.l         0
RomEnd:         dc.l Padding+$4B
RamStart:       dc.l M68K_RAM&$FFFFFF
RamEnd:         dc.l unk_FFFFFF&$FFFFFF
SramCode:       dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
ModemCode:      dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
Reserved:       dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20
CountryCode:    dc.b $55,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20


Reserv3F:                               ; CODE XREF: Reserv3F   j
                bra.s   Reserv3F
; End of function Reserv3F


Reset:
                lea     SetupValues(pc),a5
                movem.l (a5)+,d5-d7/a0-a4
                move.b  -$10FF(a1),d0
                andi.b  #$F,d0
                beq.s   SkipSecurity
                move.l  #'SEGA',$2F00(a1)
SkipSecurity:                           ; CODE XREF: Reset+10   j
                move.w  (a4),d0
                moveq   #0,d0
                movea.l d0,a6
                move.l  a6,usp
                moveq   #$17,d1
loc_226:                                ; CODE XREF: Reset+2A   j
                move.b  (a5)+,d5
                move.w  d5,(a4)
                add.w   d7,d5
                dbf     d1,loc_226
                move.l  #$40000080,(a4)
                move.w  d0,(a3)
loc_238:                                ; CODE XREF: Reset+3C   j
                move.w  (a4),d4
                btst    #1,d4
                bne.s   loc_238
                move.l  #$81048F02,(a4)
                move.l  #$C0000000,(a4)
                moveq   #$1F,d3
loc_24E:                                ; CODE XREF: Reset+4E   j
                move.l  d0,(a3)
                dbf     d3,loc_24E
                move.l  #$40000010,(a4)
                moveq   #$13,d4
loc_25C:                                ; CODE XREF: Reset+5C   j
                move.l  d0,(a3)
                dbf     d4,loc_25C
                moveq   #3,d5
loc_264:                                ; CODE XREF: Reset+66   j
                move.b  (a5)+,$11(a3)
                dbf     d5,loc_264
                bra.s   Init
; ---------------------------------------------------------------------------
SetupValues:    dc.w 0                  ; DATA XREF: Reset   o
                dc.w $8000
                dc.l $3FFF
                dc.w 0
                dc.w $100
                dc.l Z80_RAM
                dc.l IO_Z80BUS
                dc.l IO_Z80RES
                dc.l VDP_DATA
                dc.l VDP_CTRL
VDPInitValues:  dc.b   4
                dc.b $14
                dc.b $30 ; 0
                dc.b $3C ; <
                dc.b   7
                dc.b $6C ; l
                dc.b   0
                dc.b   0
                dc.b   0
                dc.b   0
                dc.b $FF
                dc.b   0
                dc.b $81
                dc.b $37 ; 7
                dc.b   0
                dc.b   1
                dc.b   1
                dc.b   0
                dc.b   0
                dc.b $FF
                dc.b $FF
                dc.b   0
                dc.b   0
                dc.b $80
PSGInitValues:  dc.b $9F
                dc.b $BF
                dc.b $DF
                dc.b $FF
; ---------------------------------------------------------------------------
Init:                                   ; CODE XREF: Reset+6A   j
                lea     (Load_Value_In_Ram).w,a0
                lea     RegTable(pc),a1 ; " SEG"
                movem.l (a1)+,d4-d7/a2-a6
                move.w  #$3F,d0 ; '?'
WriteProgram:                           ; CODE XREF: Reset+BA   j
                move.w  (a1)+,(a0)+
                dbf     d0,WriteProgram
                jsr     Load_Value_In_Ram
Inf_Loop:                               ; CODE XREF: Reset:Inf_Loop   j
                bra.s   Inf_Loop
; End of function Reset
; ---------------------------------------------------------------------------
RegTable:       dc.b ' SEG'             ; DATA XREF: Reset+AC   o
                dc.l $45940003
                dc.l $F7
                dc.b 'SEGA'
                dc.l IO_TMSS
                dc.l $A14101
                dc.l VDP_CTRL
                dc.l VDP_DATA
                dc.l $A10001


MainCode:
                bset    #0,(a3)
                cmp.l   (ConsoleName).w,d7 ; Check "SEGA"
                beq.s   SecurityPass
                cmp.l   (ConsoleName).w,d4 ; Check SEG
                bne.s   SecurityFail
                cmpi.b  #'A',(ConsoleName+4).w ; Check A
                beq.s   SecurityPass
SecurityFail:                           ; CODE XREF: MainCode+E   j
                bclr    #0,(a3)
                move.b  (a6),d0
                andi.b  #$F,d0
                beq.s   locret_314
                move.l  #0,(a2)
locret_314:                             ; CODE XREF: MainCode+22   j
                rts
; ---------------------------------------------------------------------------
SecurityPass:                           ; CODE XREF: MainCode+8   j
                                        ; MainCode+16   j
                bclr    #0,(a3)
                jsr     (PalLoad).l
                move.l  #$4C200000,(a4)
WriteText:                              ; CODE XREF: MainCode+3E   j
                move.l  (a1)+,(a5)
                dbf     d6,WriteText
                jsr     (ShowText).l
                move.w  #$8144,(a4)
                move.w  #$3C,d0 ; '<'
                bsr.s   loc_35C
                move.w  #$8104,(a4)
                move.b  (a6),d0
                andi.b  #$F,d0
                beq.s   loc_34E
                move.l  #0,(a2)
loc_34E:                                ; CODE XREF: MainCode+5C   j
                bset    #0,(a3)
                moveq   #0,d0
                movea.l d0,a0
                movea.l (a0)+,sp
                movea.l (a0)+,a0
                jmp     (a0)
; End of function MainCode
; ---------------------------------------------------------------------------
loc_35C:                                ; CODE XREF: MainCode+50   p
                                        ; ROM:00000364   j
                move.w  #$95CE,d1
loc_360:                                ; CODE XREF: ROM:loc_360   j
                dbf     d1,loc_360
                dbf     d0,loc_35C
                rts
; ---------------------------------------------------------------------------
TMSS_Font_Palette:incbin "Art/Pal/TMSS_Font_Palette.pal"
                even
TMSS_Font:      incbin "Art/Unc/TMSS_Font.unc"
                even
                dc.b '   produced by or'
                dc.b $FF
                dc.b ' under license from'
                dc.b $FF
                dc.b 'sega,enterprises ltd{'
                dc.b   0


PalLoad:                                ; CODE XREF: MainCode+30   p
                move.w  (a1)+,d0
                move.l  #$C0020000,(a4)
PalLoad_Colors:                         ; CODE XREF: PalLoad+A   j
                move.w  (a1)+,(a5)
                dbf     d0,PalLoad_Colors
                rts
; End of function PalLoad


ShowText:                               ; CODE XREF: MainCode+42   p
                                        ; ShowText+16   j
                move.l  d5,(a4)
loc_79E:                                ; CODE XREF: ShowText+E   j
                moveq   #0,d1
                move.b  (a1)+,d1
                bmi.s   loc_7AC
                bne.s   loc_7A8
                rts
; ---------------------------------------------------------------------------
loc_7A8:                                ; CODE XREF: ShowText+8   j
                move.w  d1,(a5)
                bra.s   loc_79E
; ---------------------------------------------------------------------------
loc_7AC:                                ; CODE XREF: ShowText+6   j
                addi.l  #$1000000,d5
                bra.s   ShowText
; End of function ShowText
; ---------------------------------------------------------------------------
Padding:        dc.b $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b $FF, $FF, $FF, $FF, $FF, $FF
; end of 'ROM'
